set mouse=a
set autoindent
set tabstop=4
syntax on
colorscheme elflord

inoremap ' ''<left>
inoremap ( ()<left>
inoremap " ""<left>
inoremap [ []<left>
inoremap < <lt>><left>
inoremap {<cr> {<cr>}<c-o>O

imap #i #include<space><

"inoremap <F1> <ESC>:w<CR>a

"inoremap <F2> <ESC>:wq<CR>
"nnoremap <F2> :wq<CR>

"inoremap <F3> <ESC>:m+1<CR>a
"nnoremap <F3> <ESC>:m+1<CR>a

"inoremap <F4> <ESC>:m-2<CR>a
"nnoremap <F4> <ESC>:m-2<CR>a

"inoremap <F5> <ESC>:t.<CR>a
"nnoremap <F5> <ESC>:t.<CR>a

imap if<cr> if<space>(<right><cr>{<cr>
imap while<cr> while<space>(<right><cr>{<cr>
imap for<cr> for<space>(size_t<space>i<space>=<space>0;<space>i<space><<space>count;<space>++i<right><cr>{<cr>

" ctrl + c to save
inoremap <c-c> <c-o>:w<cr>
nnoremap <c-c> :w<cr>

" \ + arrow keys yo move lines
inoremap <Leader><Down> <c-o>:m+1<cr>
inoremap <Leader><Up> <c-o>:m-2<cr>
nnoremap <Leader><Up> :m-2<cr>
nnoremap <Leader><Down> :m+1<cr>

function! ClearQuotes()
	let quote = getline('.')[col('.')-1]
	let quote2 = getline('.')[col('.')-2]
	if ( (quote == '"' || quote == "'") && quote == quote2 )
		return "\<ESC>df".quote."a"
	elseif (quote2 == "(" && quote == ")")
		return "\<ESC>df".quote."a"
	elseif (quote2 == "[" && quote == "]")
		return "\<ESC>df".quote."a"
	elseif (quote2 == "{" && quote == "}")
		return "\<ESC>df".quote."a"
	elseif (quote2 == "<" && quote == ">")
		return "\<ESC>df".quote."a"
	else
		return "\<BS>"
	endif
endfunction

" tab to autocomplete
" inoremap <tab> <c-p>
inoremap <expr> <Tab> getline('.')[col('.')-2] !~ '^\s\?$' \|\| pumvisible() ? '<C-P>' : '<Tab>'
imap <BS> <C-R>=ClearQuotes()<CR>

autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

set showmatch
